@rendermode InteractiveServer
@page "/UserDashBoard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject RoleService roleService;
@attribute [Authorize(Roles = "Admin")];

<label>Add New Role</label>
<input type="text" @bind="NewRoleName" placeholder="Name" />
<button @onclick="AddRole">Add new Role</button>

<table class="table">
  <thead>
    <tr>
      <th scope="col">ID</th>
      <th scope="col">Name</th>
      <th scope="col">Delete</th>
      <th scope="col">Edit</th>
    </tr>
  </thead>
  <tbody>

    @foreach (var role in Roles)
    {
      
      <tr>
        <td> @role.Id </td>
        <td> @role.Name</td>
        @if (role.Id != "6fa6823d-3004-47ee-b55b-86554da82ee9")
        {
        <td><button class="btn btn-danger" @onclick="()=> roleService.DeleteRole(role.Id)">Delete</button> </td>
        <td><button class="btn btn-primary"> Edit </button></td>
        }
      </tr>
    }

  </tbody>
</table>


<table class="table">
  <thead>
    <tr>
      <th> UserName </th>
      <th> Role </th>
    </tr>
  </thead>
  <tbody>
    @foreach (var user in Users)
    {
      <tr>
        <td>@user.UserName</td>
        <td><RollSelector RoleSelected="e => UserRoleManger(user.Id ,e)" CurentRole="@(userRoles.ContainsKey(user.Id) ? userRoles[user.Id] : null)" /></td>
      </tr>
    }
  </tbody>
</table>



@code
{
  List<IdentityRole> Roles => roleService.GetRoles();
  Dictionary<string, string> userRoles => roleService.GetIdentityUserRoles();
  List<ApplicationUser> Users => roleService.GetUsers();

  string? NewRoleName;

  void AddRole()
  {
    if (!string.IsNullOrWhiteSpace(NewRoleName))
    {
      var id = Guid.NewGuid().ToString();
      var role = new IdentityRole { Id = id, Name = NewRoleName };
      roleService.AddRoll(role);
      NewRoleName = string.Empty;
    }

  }

  void UserRoleManger(string userId, string roleId)
  {
    var userrole = new IdentityUserRole<string>() { UserId = userId, RoleId = roleId };
    roleService.UserRoleManger(userrole);
  }
}